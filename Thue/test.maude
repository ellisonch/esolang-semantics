load thue-compiled
mod THUE-TEST is
	including THUE .
	
	--- Programs
  	op pHelloWorld : -> K [metadata "arity 0"] .
	--- a::=~Hello World!
	--- ::=
	--- a
	eq pHelloWorld = write(inject("a")(.List{K}),, inject("Hello world")(.List{K})) ~> start(inject("a")(.List{K})) .
	
	op pIncAny : -> K [metadata "arity 0"] .
	***(
		_0::=_

		1_::=1++
		0_::=0++

		0++::=1
		01++::=10
		11++::=1++0
		_1++::=10

		__::=_//_
		//::=:::
		
		.0::=~0
		.1::=~1
		!0::=!.0
		!1::=!.1

		 ::= 

		!.__.!
	***)
	 
	eq pIncAny = (.).K
		~> subst(inject("_0")(.List{K}),, inject("_")(.List{K}))
		
		~> subst(inject("1_")(.List{K}),, inject("1++")(.List{K}))
		~> subst(inject("0_")(.List{K}),, inject("0++")(.List{K}))
		
		~> subst(inject("0++")(.List{K}),, inject("#1")(.List{K}))
		~> subst(inject("01++")(.List{K}),, inject("#10")(.List{K}))
		~> subst(inject("11++")(.List{K}),, inject("1++0")(.List{K}))
		~> subst(inject("_1++")(.List{K}),, inject("10")(.List{K}))
		~> subst(inject("0#")(.List{K}),, inject("#0")(.List{K}))
		~> subst(inject("1#")(.List{K}),, inject("#1")(.List{K}))
		~> subst(inject("_#")(.List{K}),, inject("")(.List{K}))
		
		~> subst(inject("__")(.List{K}),, inject("_*_")(.List{K}))
		~> read(inject("*")(.List{K}))
		
		~> write(inject(".0")(.List{K}),, inject("0")(.List{K}))
		~> write(inject(".1")(.List{K}),, inject("1")(.List{K}))
		~> subst(inject("!0")(.List{K}),, inject("!.0")(.List{K}))
		~> subst(inject("!1")(.List{K}),, inject("!.1")(.List{K}))
		
		~> start(inject("!.__.!")(.List{K}))
	.
	
	--- Sierpinski's triangle, HTML version
	--- By Nikita Ayzikovsky
	op pSierpinski : -> K [metadata "arity 0"] .
	eq pSierpinski = (.).K
		~> write(inject("X")(.List{K}),, inject(" ")(.List{K}))
		~> write(inject("Y")(.List{K}),, inject("*")(.List{K}))
		~> write(inject("Z")(.List{K}),, inject("\n")(.List{K}))
		~> subst(inject("_.")(.List{K}),, inject("._X")(.List{K}))
		~> subst(inject("_*")(.List{K}),, inject("*_Y")(.List{K}))
		~> subst(inject("._|")(.List{K}),, inject(".Z-|")(.List{K}))
		~> subst(inject("*_|")(.List{K}),, inject("Z")(.List{K}))
		~> subst(inject("..-")(.List{K}),, inject(".-.")(.List{K}))
		~> subst(inject("**-")(.List{K}),, inject("*-.")(.List{K}))
		~> subst(inject("*.-")(.List{K}),, inject("*-*")(.List{K}))
		~> subst(inject(".*-")(.List{K}),, inject(".-*")(.List{K}))
		~> subst(inject("@.-")(.List{K}),, inject("@_.")(.List{K}))
		~> subst(inject("@*-")(.List{K}),, inject("@_*")(.List{K}))
		~> start(inject("@_*...............|")(.List{K}))
	.
	***(

	*               
	**              
	* *             
	****            
	*   *           
	**  **          
	* * * *         
	********        
	*       *       
	**      **      
	* *     * *     
	****    ****    
	*   *   *   *   
	**  **  **  **  
	* * * * * * * * 
	****************

	***)
endm

---set trace on .
rew eval(pHelloWorld) .
rew eval(pIncAny, injectL(List(explode(inject("101")(.List{K}))))(.List{K})) .
rew eval(pIncAny, injectL(List(explode(inject("11")(.List{K}))))(.List{K})) .
rew eval(pSierpinski) .
