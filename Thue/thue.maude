
mod THUE is
	including K .
	including PL-BUILTINS .
	including K-LIST-EXTRAS .
	
--- Syntax
	op subst : -> KLabel [metadata "arity 2"] .
	op write : -> KLabel [metadata "arity 2"] .
	op read : -> KLabel [metadata "arity 2"] .
	op start : -> KLabel [metadata "arity 1"] .
	
--- Configuration
	op output : -> CellLabel .
	op input : -> CellLabel .
	op k : -> CellLabel .
	op rules : -> CellLabel .
	op someRules : -> CellLabel .
	op disabled : -> CellLabel .
	op result : -> CellLabel .
	
	mb configuration 
	< T >
		< k > K:K </ k >
		< someRules > (.).Bag </ someRules >
		< rules > (.).Bag </ rules >
		< disabled > (.).Bag </ disabled >
		< output > (.).K </ output >
		< input > (.).List </ input >
	</ T >  
	< result > K:K </ result > 
	: KSentence .
	
--- Semantics
	op eval : K -> Bag .
	op eval : K K -> Bag .
	op inject : Char -> KLabel .
	op inject : String -> KLabel .
	op injectM : Map -> KLabel .
	op injectL : List -> KLabel .

	op explode : -> KLabel [metadata "arity 1"] .
	op join : -> KLabel [metadata "arity 1"] .
	op string : -> KResultLabel .
	
	---- define explode of a string
	mb [explodeString]: rule
		explode((inject(S:String)(.List{K}) => inject(substrString(S:String, 1, lengthString(S:String)))(.List{K})) ~> K:K ~> ((.).K => inject(substrString(S:String, 0, 1))(.List{K})))
		if notBool(S:String ==Bool "")
		: KSentence [metadata "computational rule"] .
	mb rule
		(explode(inject("")(.List{K}) ~> K:K) => string(K:K))
		: KSentence [metadata "computational rule"] .
	---- end define explode of a string
	---- define join of a string
	mb [joinString-start]: rule
		(join(K:K) => join(K:K,, inject("")(.List{K})))
		: KSentence [metadata "computational rule"] .
	mb [joinString-normal]: rule
		join(inject(C:Char)(.List{K}) ~> K:K,, inject(S:String)(.List{K})) => join(K:K,, inject(S:String +String C:Char)(.List{K}))
		: KSentence [metadata "computational rule"] .
	mb [joinString-finish]: rule
		join((.).K,, inject(S:String)(.List{K})) => inject(S:String)(.List{K})
		: KSentence [metadata "computational rule"] .
	---- end join of a string
	
	
	eq [Start]: eval(K:K) =
	< T >
		< k > K:K </ k >
		< someRules > (.).Bag </ someRules >
		< disabled > (.).Bag </ disabled >
		< output > (.).K </ output >
		< input > (.).List </ input >
	</ T > .
	eq [StartWithInput]: eval(K1:K, injectL(L:List)(.List{K})) =
	< T >
		< k > K1:K </ k >
		< someRules > (.).Bag </ someRules >
		< disabled > (.).Bag </ disabled >
		< output > (.).K </ output >
		< input > L:List </ input >
	</ T > .
	
	mb [doneLoadingRules]: rule
		< k > start(K:K) => explode(K:K) </ k >
		< someRules => rules > S:Bag </ (someRules => rules) >
		: KSentence [metadata "computational rule"] .
		
	mb [saveRule]: rule
		< k > subst(K1:K,, K2:K) => (.).K ...</ k >
		< someRules >... (.).Bag => BagItem(subst(explode(K1:K),, explode(K2:K))) ...</ someRules >
		: KSentence [metadata "computational rule"] .
	mb [saveWrite]: rule
		< k > write(K1:K,, K2:K) => (.).K ...</ k >
		< someRules >... (.).Bag => BagItem(write(explode(K1:K),, explode(K2:K))) ...</ someRules >
		: KSentence [metadata "computational rule"] .
	mb [saveRead]: rule
		< k > read(K:K) => (.).K ...</ k >
		< someRules >... (.).Bag => BagItem(read(explode(K:K))) ...</ someRules >
		: KSentence [metadata "computational rule"] .
		
	mb [applyRule]: rule
		< k > string(Ka:K ~> (K1:K => K2:K) ~> Kb:K) </ k >
		< rules >... BagItem(subst(string(K1:K),, string(K2:K))) ((.).Bag => D:Bag) ...</ rules >
		< disabled > D:Bag => (.).Bag </ disabled >
		: KSentence [metadata "computational rule"] .
	mb [applyWrite]: rule
		< k > string(Ka:K ~> (K1:K => (.).K) ~> Kb:K) </ k >
		< rules >... BagItem(write(string(K1:K),, string(K2:K))) ((.).Bag => D:Bag) ...</ rules >
		< disabled > D:Bag => (.).Bag </ disabled >
		< output >... (.).K => K2:K </ output >
		: KSentence [metadata "computational rule"] .
	mb [applyRead]: rule
		< k > string(Ka:K ~> (K1:K => K2:K) ~> Kb:K) </ k >
		< rules >... BagItem(read(string(K1:K))) ((.).Bag => D:Bag) ...</ rules >
		< disabled > D:Bag => (.).Bag </ disabled >
		< input > ListItem(string(K2:K)) => (.).List ...</ input >
		: KSentence [metadata "computational rule"] .
	
	mb [disabledRule]: rule
		< k > string(K2:K) </ k >
		< rules >... BagItem(L:KLabel(string(K1:K),, Kl:List{K})) => (.).Bag ...</ rules >
		< disabled >... (.).Bag => BagItem(L:KLabel(string(K1:K),, Kl:List{K})) ...</ disabled >
		if notBool(inKList(K1:K, K2:K))
		: KSentence [metadata "computational rule"] .
		
	mb [finish]: rule
		< T >... 
			< rules > (.).Bag </ rules >
			< output > K:K </ output >
			...</ T >
		=>
		< result > join(K:K) </ result >
		: KSentence [metadata "computational rule"] .
	
endm
